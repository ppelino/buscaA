# -*- coding: utf-8 -*-
"""Tarefa Busca A Estrela.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_irw0PDLhUSBnZO-oh-8hYXQBO-rSCe2

# Tarefa Busca A Estrela (A*)

## Grafo
"""


class Vertice:

    def __init__(self, rotulo, distancia_objetivo):
        self.rotulo = rotulo
        self.visitado = False
        self.distancia_objetivo = distancia_objetivo
        self.adjacentes = []

    def adiciona_adjacente(self, adjacente):
        self.adjacentes.append( adjacente )

    def mostra_adjacentes(self):
        for i in self.adjacentes:
            print( i.vertice.rotulo, i.custo )


class Adjacente:
    def __init__(self, vertice: object, custo: object) -> object:
        self.vertice = vertice
        self.custo = custo
        self.distancia_aestrela = vertice.distancia_objetivo + self.custo


class Grafo:
    aruja = Vertice( "Aruja", 34 )
    biritibaMirin = Vertice( "Biritiba Mirin", 68 )
    ferrazVasconcelos = Vertice( "Ferraz Vasconcelos", 7 )
    guararema = Vertice( "Guararema", 50 )
    guarulhos = Vertice( "Guarulhos", 37 )
    itaquaquecetuba = Vertice( "Itaquaquecetuba", 9 )
    suzano = Vertice( "Suzano", 0 )
    mogidasCruzes = Vertice( "Mogi das Cruzes", 14 )
    poa = Vertice( "Poa", 5 )
    salesopolis = Vertice( "Salesopolis", 57 )
    santaBranca = Vertice( "Santa Branca", 69 )
    santaIsabel = Vertice( "Santa Isabel", 41 )


    guarulhos.adiciona_adjacente( Adjacente( aruja, 23 ) )
    guarulhos.adiciona_adjacente( Adjacente( santaIsabel, 36 ) )
    guarulhos.adiciona_adjacente( Adjacente( itaquaquecetuba, 19 ) )

    aruja.adiciona_adjacente( Adjacente( guarulhos, 23 ) )
    aruja.adiciona_adjacente( Adjacente( santaIsabel, 15 ) )
    aruja.adiciona_adjacente( Adjacente( itaquaquecetuba, 26 ) )
    aruja.adiciona_adjacente( Adjacente( mogidasCruzes, 24 ) )

    santaIsabel.adiciona_adjacente( Adjacente( mogidasCruzes, 42 ) )
    santaIsabel.adiciona_adjacente( Adjacente( guararema, 32 ) )
    santaIsabel.adiciona_adjacente( Adjacente( guarulhos, 36 ) )
    santaIsabel.adiciona_adjacente( Adjacente( aruja, 15 ) )

    guararema.adiciona_adjacente( Adjacente( itaquaquecetuba, 50 ) )
    guararema.adiciona_adjacente( Adjacente( mogidasCruzes, 19 ) )
    guararema.adiciona_adjacente( Adjacente( biritibaMirin, 33 ) )
    guararema.adiciona_adjacente( Adjacente( santaBranca, 32 ) )
    guararema.adiciona_adjacente( Adjacente( salesopolis, 38 ) )
    guararema.adiciona_adjacente( Adjacente( santaIsabel, 32 ) )

    santaBranca.adiciona_adjacente( Adjacente( salesopolis, 22 ) )
    santaBranca.adiciona_adjacente( Adjacente( guararema, 32 ) )

    salesopolis.adiciona_adjacente( Adjacente( biritibaMirin, 25 ) )
    salesopolis.adiciona_adjacente( Adjacente( santaBranca, 22 ) )
    salesopolis.adiciona_adjacente( Adjacente( guararema, 38 ) )

    biritibaMirin.adiciona_adjacente( Adjacente( mogidasCruzes, 20 ) )
    biritibaMirin.adiciona_adjacente( Adjacente( guararema, 33 ) )
    biritibaMirin.adiciona_adjacente( Adjacente( salesopolis, 25 ) )

    ferrazVasconcelos.adiciona_adjacente( Adjacente( poa, 4 ) )
    ferrazVasconcelos.adiciona_adjacente( Adjacente( suzano, 7 ) )

    itaquaquecetuba.adiciona_adjacente( Adjacente( mogidasCruzes, 30 ) )
    itaquaquecetuba.adiciona_adjacente( Adjacente( poa, 4 ) )
    itaquaquecetuba.adiciona_adjacente( Adjacente( guararema, 50 ) )
    itaquaquecetuba.adiciona_adjacente( Adjacente( guarulhos, 19 ) )
    itaquaquecetuba.adiciona_adjacente( Adjacente( aruja, 23 ) )

    mogidasCruzes.adiciona_adjacente( Adjacente( suzano, 17 ) )
    mogidasCruzes.adiciona_adjacente( Adjacente( itaquaquecetuba, 30 ) )
    mogidasCruzes.adiciona_adjacente( Adjacente( aruja, 24 ) )
    mogidasCruzes.adiciona_adjacente( Adjacente( santaIsabel, 42 ) )
    mogidasCruzes.adiciona_adjacente( Adjacente( guararema, 19 ) )
    mogidasCruzes.adiciona_adjacente( Adjacente( biritibaMirin, 20 ) )

    poa.adiciona_adjacente( Adjacente( suzano, 5 ) )
    poa.adiciona_adjacente( Adjacente( itaquaquecetuba, 4 ) )
    poa.adiciona_adjacente( Adjacente( ferrazVasconcelos, 7 ) )

    suzano.adiciona_adjacente( Adjacente( mogidasCruzes, 17 ) )
    suzano.adiciona_adjacente( Adjacente( ferrazVasconcelos, 7 ) )
    suzano.adiciona_adjacente( Adjacente( poa, 5 ) )

grafo = Grafo()

"""## Vetor ordenado (adjacente)"""

import numpy as np


class VetorOrdenado:

    def __init__(self, capacidade):
        self.capacidade = capacidade
        self.ultima_posicao = -1
        # Mudança no tipo de dados
        self.valores = np.empty( self.capacidade, dtype=object )

    # Referência para o vértice e comparação com a distância A*
    def insere(self, adjacente: object) -> object:
        if self.ultima_posicao == self.capacidade - 1:
            print( 'Capacidade máxima atingida' )
            return
        posicao = 0
        for i in range( self.ultima_posicao + 1 ):
            posicao = i
            if self.valores[i].distancia_aestrela > adjacente.distancia_aestrela:
                break
            if i == self.ultima_posicao:
                posicao = i + 1
        x = self.ultima_posicao
        while x >= posicao:
            self.valores[x + 1] = self.valores[x]
            x -= 1
        self.valores[posicao] = adjacente
        self.ultima_posicao += 1

    def imprime(self):
        if self.ultima_posicao == -1:
            print( 'O vetor está vazio' )
        else:
            for i in range( self.ultima_posicao + 1 ):
                print( i, ' - ', self.valores[i].vertice.rotulo, ' - ',
                       self.valores[i].custo, ' - ',
                       self.valores[i].vertice.distancia_objetivo, ' - ',
                       self.valores[i].distancia_aestrela )


grafo.itaquaquecetuba.adjacentes

grafo.itaquaquecetuba.adjacentes[0].vertice.rotulo, grafo.itaquaquecetuba.adjacentes[0].vertice.distancia_objetivo

grafo.itaquaquecetuba.adjacentes[0].distancia_aestrela, grafo.itaquaquecetuba.adjacentes[0].custo

vetor = VetorOrdenado(3)
vetor.insere(grafo.mogidasCruzes.adjacentes[0])
vetor.insere(grafo.mogidasCruzes.adjacentes[1])
vetor.insere(grafo.mogidasCruzes.adjacentes[2])


vetor.imprime()

"""## Busca AEstrela"""


class AEstrela:
    def __init__(self, objetivo):
        self.objetivo = objetivo
        self.encontrado = False

    def buscar(self, atual):
        print( '----------' )
        print( 'Atual: {}'.format( atual.rotulo ) )
        atual.visitado = True

        if atual == self.objetivo:
            self.encontrado = True
        else:
            vetor_ordenado = VetorOrdenado( len( atual.adjacentes ) )
            for adjacente in atual.adjacentes:
                if adjacente.vertice.visitado == False:
                    adjacente.vertice.visitado = True
                    vetor_ordenado.insere( adjacente )
            vetor_ordenado.imprime()

            if vetor_ordenado.valores[0] != None:
                self.buscar( vetor_ordenado.valores[0].vertice )


busca_aestrela = AEstrela( grafo.suzano )
busca_aestrela.buscar( grafo.ferrazVasconcelos )
